import React, { useState } from 'react';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import * as XLSX from 'xlsx';
import logoImg from '../img/kyvor_logo.png'; // Adjust the path if necessary
// import checkBoxImg from '../img/check-box.png';
// import warningImg from '../img/warning.png';
// import stopImg from '../img/stop.png';
// import blueCircleImg from '../img/record.png';


const PharmacogenomicsTest = () => {
  const [patientDetails, setPatientDetails] = useState({
    patientID: '',
    name: '',
    age: '',
    sex: '',
  });
  const [physicianInfo, setPhysicianInfo] = useState('');
  const [specimen, setSpecimen] = useState({ type: '', date: '' });
  const [excelData, setExcelData] = useState(null);
  const [pdfUrl, setPdfUrl] = useState('');

  // Automatically set the report date to today's date
  const reportDate = new Date().toLocaleDateString();

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setPatientDetails({ ...patientDetails, [name]: value });
  };

  const handlePhysicianChange = (e) => {
    setPhysicianInfo(e.target.value);
  };

  const handleSpecimenChange = (e) => {
    const { name, value } = e.target;
    setSpecimen({ ...specimen, [name]: value });
  };

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onload = (evt) => {
      const data = new Uint8Array(evt.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      const parsedData = XLSX.utils.sheet_to_json(sheet);
      setExcelData(parsedData);
    };
    reader.readAsArrayBuffer(file);
  };

  const generatePDF = () => {
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'pt',
      format: 'a4',
    });

    const addHeader = () => {
      // Add logo
      doc.addImage(logoImg, 'PNG', 40, 14, 100, 60); // Adjust size and position as needed

      // Add MEDLYTx text
      doc.setFontSize(36);
      doc.setFont("helvetica", "bold");
      doc.setTextColor('#7c5dac');
      doc.text('MEDLY', 401, 70); // Adjust position as needed
      doc.setFont("helvetica", "bold");
      doc.setTextColor('#5f5f5e');
      doc.text('Tx', 530, 69); // Adjust position as needed

      // Draw horizontal line
      const lineY = 85;
      doc.setDrawColor('#000');
      doc.setLineWidth(0.2);
      doc.line(20, lineY, 580, lineY);
    };

    const addFooter = (pageNumber) => {
      if (pageNumber > 1){
      const footerY = 841; // Y position for footer (adjust as needed)
      const footerHeight = 30; // Height of the footer

      // Background color
      doc.setFillColor('#e0dcdc');
      doc.rect(0, footerY - footerHeight, 600, footerHeight, 'F');

      // Text color
      doc.setFontSize(10.5);
      doc.setFont("helvetica", "bold");
      doc.setTextColor('#000');

      // Page number
      doc.text(`Page ${pageNumber}`, 20, footerY - 10);

      // Patient ID
      doc.text(`Patient ID: ${patientDetails.patientID}`, 210, footerY - 10);

      // Patient Name
      doc.text(`Patient Name: ${patientDetails.name}`, 410, footerY - 10);
      }
    };

    const addFirstPageContent = () => {
      
        doc.setFontSize(10);
        const backgroundColor = '#e0dcdc';
        const contentX = 30; // X position of the content area
        const contentWidth = 540; // Width of the content area
        const textHeight = 9; // Height for text areas (adjusted for smaller height)
        const borderRadius = 5; // Radius for border radius
        const margin = 10; // Margin for rectangle
      
        // Helper function to draw background with border radius
        const drawBackgroundRect = (yPosition, width, height) => {
          doc.setFillColor(backgroundColor);
          doc.roundedRect(contentX - margin, yPosition - margin, width + 2 * margin, height + 1.2 * margin, borderRadius, borderRadius, 'F');
        };
      
        // Helper function to draw a line connecting two points
        const drawConnectingLine = (x1, y1, x2, y2) => {
          doc.setDrawColor('#000');
          doc.setLineWidth(0.5);
          doc.line(x1, y1, x2, y2);
        };
      
        // Define text positions
        const patientInfoY = 115;
        const physicianInfoY = 140;
        const reportDateY = 140; // Align with Physician Information
        const specimenY = 165;
        const lineAfterSpecimenY = specimenY + textHeight + 10; // Position for the line after Specimen section
      
        // Draw background for Patient Information
        drawBackgroundRect(patientInfoY, contentWidth, textHeight);
        const patientInfo = `Patient information: ${patientDetails.patientID} | ${patientDetails.sex} | ${patientDetails.age} | ${patientDetails.name}`;
        doc.setTextColor('#000');
        doc.text(patientInfo, contentX, patientInfoY + textHeight / 3);
      
        // Draw background for Physician Information and Report Date
        const combinedWidth = contentWidth / 2; // Width for both texts
        const combinedHeight = textHeight; // Height for both texts
        drawBackgroundRect(physicianInfoY, combinedWidth + 100, combinedHeight); // Added 10 for spacing
      
        // Draw Physician Information
        const physicianInfoText = `Physician information: ${physicianInfo}`;
        doc.text(physicianInfoText, contentX, physicianInfoY + textHeight / 3);
      
        // Draw Report Date background with even height and border radius
        const reportDateWidth = 165; // Width of the background rectangle for Report Date
        const reportDateBackgroundY = reportDateY - 10; // Adjust Y position if needed
        const reportDateHeight = textHeight + 11; // Ensure even height
        doc.setFillColor('#d3d3d3'); // Light gray background color
        doc.roundedRect(contentX + combinedWidth + 115, reportDateBackgroundY, reportDateWidth, reportDateHeight, 5, 5, 'F'); // Added rounded borders
      
        // Draw Report Date text on top of background
        const reportDateText = `Report Date: ${reportDate}`;
        doc.setTextColor('#000');
        doc.text(reportDateText, contentX + combinedWidth + 137, reportDateY + textHeight / 3, { align: 'left' }); // Moved to the right
      
        // Draw a line connecting the Physician Information and Report Date
        drawConnectingLine(contentX + combinedWidth, physicianInfoY, contentX + combinedWidth + 10, reportDateY);
      
        // Draw background for Specimen
        drawBackgroundRect(specimenY, contentWidth, textHeight);
        const specimenText = `Specimen: Type - ${specimen.type} | ${specimen.date}`;
        doc.text(specimenText, contentX, specimenY + textHeight / 3);
      
        // Draw horizontal line after Specimen section
        doc.setDrawColor('#7c5dac'); // Line color
        doc.setLineWidth(3); // Line width
        doc.line(contentX / 1.5, lineAfterSpecimenY / .95, contentX / .7 + contentWidth, lineAfterSpecimenY / .95); // Draw line

        // Add paragraph after the horizontal line
        const paragraphY = lineAfterSpecimenY + 30; // Adjust position below the horizontal line
        const paragraph = `MEDLYTx is a molecular data analytics and simulation engine based pharmacogenomics test that explores the whole exome data of the patientâ€™s DNA. This test demystifies the complex genomic anomalies unique to that patient and provides information about how the patient may respond to the tested drugs.`;
        doc.setFontSize(13.1);
        doc.setTextColor('#000');
        doc.setFont("helvetica", "normul")
        doc.text(paragraph, contentX / 1.5, paragraphY, { maxWidth: contentWidth / .96 }); // Added maxWidth to wrap text within the content area
        
       // Add content box after the paragraph
    const boxY = paragraphY + 50; // Position after paragraph
    const boxHeight = 530; // Adjust height to fit content

    // Draw rounded rectangle with border radius
    doc.setDrawColor('#000'); // Line color
    doc.setLineWidth(1);
    doc.roundedRect(contentX / 1.8, boxY, contentWidth / .95, boxHeight, 25, 25, 'S');

    // Add heading inside the box with new styles and positions
const boxHeadingY = boxY + 20;
doc.setFontSize(15);
doc.setFont("helvetica", "bold");
doc.setTextColor('#7c5dac');
doc.text('MEDLYTx', contentX + 195, boxHeadingY); // Adjust position if needed

doc.setFontSize(15);
doc.setFont("helvetica", "bold");
doc.setTextColor('#5f5f5e');
doc.text('Reporting', contentX + 270, boxHeadingY - .5); // Adjust position as needed
    
    // Add first paragraph inside the box
    const boxParagraphY = boxHeadingY + 20;
    const boxParagraph = `According to the genotype identified in the patient, medications are classified as described below.`;
    doc.setFontSize(8);
    doc.text(boxParagraph, contentX + 90, boxParagraphY, { maxWidth: contentWidth / .2 });

    // Add first table inside the box
    const tableStartY = boxParagraphY + 20;
    const rowHeight = 30;
    const tableData = [
      ['PGx Type', 'Description'],
      ['checkBox', 'Use as Directed: The Genotype of the patient corresponds to having Normal metabolism/typical risk of adverse events.'],
      ['Warning', 'Use with Caution: Altered metabolism compared to normal, data/labels/guidelines suggest monitoring may suffice and the risk of adverse reactions / clinical impact is moderate.'],
      ['Stop', 'Increased Caution/ Reduce Dose or Avoid: Altered metabolism compared to normal, data/labels/guidelines indicate substantial dosage and monitoring modifications, cautionary measures, or contraindication for the genotype.'],
      ['Blue Circle', 'Limited Pharmacogenomic (PGx) Impact: Pharmacogenetic variations do not exert a significant influence on drug response, and current evidence lacks substantial genotype-related support regarding drug-gene interactions.']
  ];

    // Draw table headers
    doc.setFontSize(8);
    doc.setFont('helvetica', 'bold');
    doc.text(tableData[0][0], contentX + 20, tableStartY);
    doc.text(tableData[0][1], contentX + 90, tableStartY);

    // Draw table rows
    doc.setFont('helvetica', 'normal');
    for (let i = 1; i < tableData.length; i++) {
        const rowY = tableStartY + i * rowHeight;
        doc.text(tableData[i][0], contentX + 20, rowY);
        doc.text(tableData[i][1], contentX + 90, rowY, { maxWidth: contentWidth - 120 });
    }

    // Add a colored horizontal line inside the box
    const lineY = tableStartY + tableData.length * rowHeight + 20;
    doc.setLineWidth(2);
    doc.setDrawColor(124, 93, 172); // RGB equivalent of #7c5dac
    doc.line(contentX - 14, lineY, contentX + contentWidth + 15, lineY);

    // Add second paragraph inside the box
    const secondParagraphY = lineY + 20;
    const secondParagraph = `Medications are reported with icons to indicate and categorize evidence based on the recommending authority.`;
    doc.setFontSize(8);
    doc.setFont('helvetica', 'bold');
    doc.text(secondParagraph, contentX + 90, secondParagraphY, { maxWidth: contentWidth / .2 });
   

    // Add second table inside the box
    const secondTableStartY = secondParagraphY + 20;
    const secondTableData = [
        ['Icon', 'Description'],
        ['â˜…', 'FDA Biomarker: Mentioned in FDA table of pharmacogenomic biomarkers.'],
        ['%', 'Professional Guideline: Type of action needed for patient genotype is available in Professional Guideline (CPIC, DPWG).'],
        ['â˜†', 'Mentioned in FDA Drug Label: FDA label mentions involvement of the pharmacogene in the drug metabolism.'],
        ['âŠ•', 'Additional Testing: Additional laboratory testing indicated in FDA label for the drug.']
    ];

    // Draw second table headers
    doc.setFontSize(8);
    doc.setFont('helvetica', 'bold');
    doc.text(secondTableData[0][0], contentX + 20, secondTableStartY);
    doc.text(secondTableData[0][1], contentX + 90, secondTableStartY);

    // Draw second table rows
    doc.setFont('helvetica', 'normal');
    for (let i = 1; i < secondTableData.length; i++) {
        const rowY = secondTableStartY + i * rowHeight;
        doc.text(secondTableData[i][0], contentX + 20, rowY);
        doc.text(secondTableData[i][1], contentX + 90, rowY, { maxWidth: contentWidth - 120 });
    }
   
       // Add horizontal row after the box
      const lineAfterBoxY = boxY + boxHeight + 8 ; // Position after the box
      doc.setDrawColor('#000');
      doc.setLineWidth(0.5);
      doc.line(contentX / 1.5, lineAfterBoxY, contentX / 1.5 + contentWidth / .95, lineAfterBoxY);
 
         // Add the paragraph after the horizontal row
      const paragraphAfterLineY = lineAfterBoxY + 12; // Position the paragraph below the line
      const findingsParagraph = `All findings mentioned in this report are based on genomic alterations found in the tested patientâ€™s DNA sample. Treating physicianâ€™s decision is final. For more information on important disclaimers please refer Annexure B.`;
      doc.setFontSize(10);
      doc.text(findingsParagraph, contentX / .50, paragraphAfterLineY, { maxWidth: contentWidth / 1.10 });
 
      };

    // Create a PDF with 15 pages
    for (let i = 1; i <= 15; i++) {
      if (i > 1) doc.addPage(); // Add a new page after the first

      addHeader();
      if (i === 1) {
        addFirstPageContent();
      }
      addFooter(i);
    }

    // Create Blob URL for preview and download
    const pdfBlob = doc.output('blob');
    const pdfUrl = URL.createObjectURL(pdfBlob);
    setPdfUrl(pdfUrl);
  };

  return (
    <div>
      <h2>Pharmacogenomics Test</h2>
      <form>
        <label>
          Patient ID:
          <input type="text" name="patientID" value={patientDetails.patientID} onChange={handleInputChange} />
        </label>
        <br />
        <label>
          Name:
          <input type="text" name="name" value={patientDetails.name} onChange={handleInputChange} />
        </label>
        <br />
        <label>
          Age:
          <input type="text" name="age" value={patientDetails.age} onChange={handleInputChange} />
        </label>
        <br />
        <label>
          Sex:
          <input type="text" name="sex" value={patientDetails.sex} onChange={handleInputChange} />
        </label>
        <br />
        <label>
          Physician Information:
          <input type="text" value={physicianInfo} onChange={handlePhysicianChange} />
        </label>
        <br />
        <label>
          Specimen Type:
          <input type="text" name="type" value={specimen.type} onChange={handleSpecimenChange} />
        </label>
        <br />
        <label>
          Specimen Date:
          <input type="date" name="date" value={specimen.date} onChange={handleSpecimenChange} />
        </label>
        <br />
        <label>
          Upload Excel File:
          <input type="file" accept=".xlsx" onChange={handleFileUpload} />
        </label>
        <br />
        <button type="button" onClick={generatePDF}>Generate PDF</button>
      </form>
      {pdfUrl && (
        <div>
          <h3>Preview:</h3>
          <iframe
            src={pdfUrl}
            width="100%"
            height="500px"
            title="PDF Preview"
          ></iframe>
          <a href={pdfUrl} download="pharmacogenomics-report.pdf">Download PDF</a>
        </div>
      )}
    </div>
  );
};

export default PharmacogenomicsTest;
